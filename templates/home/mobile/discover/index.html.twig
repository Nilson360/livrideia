{% extends 'home/mobile/base.mobile.html.twig' %}

{% block title %}Découvrir{% endblock %}

{% block content %}
    <div class="bg-white min-h-screen">
        {# Header avec titre et stats #}
        <div class="bg-gradient-to-r from-[#FF8A00] to-[#e67300] text-white p-4 rounded-b-3xl shadow-lg">
            <div class="flex items-center justify-between mb-4">
                <h1 class="text-xl font-bold">Découvrir</h1>
                <div class="bg-white/20 rounded-full px-3 py-1">
                    <span class="text-sm font-medium">{{ totalSuggestions }} suggestions</span>
                </div>
            </div>

            <div class="flex space-x-4 text-center">
                <div class="flex-1">
                    <div class="bg-white/20 rounded-xl p-3">
                        <div class="text-lg font-bold">{{ friendRequests|length }}</div>
                        <div class="text-xs opacity-90">Demandes</div>
                    </div>
                </div>
                <div class="flex-1">
                    <div class="bg-white/20 rounded-xl p-3">
                        <div class="text-lg font-bold">{{ totalSuggestions }}</div>
                        <div class="text-xs opacity-90">À découvrir</div>
                    </div>
                </div>
                <div class="flex-1">
                    <div class="bg-white/20 rounded-xl p-3">
                        <div class="text-lg font-bold">{{ app.user.friends|length }}</div>
                        <div class="text-xs opacity-90">Amis</div>
                    </div>
                </div>
            </div>
        </div>

        {# Section demandes d'amitié en attente (si il y en a) #}
        {% if friendRequests|length > 0 %}
            <div class="p-4 border-b border-gray-100">
                <h2 class="text-lg font-semibold text-gray-800 mb-3 flex items-center">
                    <div class="w-2 h-2 bg-red-500 rounded-full mr-2 animate-pulse"></div>
                    Demandes d'amitié
                    <span class="ml-2 bg-red-100 text-red-600 text-xs px-2 py-1 rounded-full">{{ friendRequests|length }}</span>
                </h2>

                <div class="space-y-3">
                    {% for request in friendRequests %}
                        <div class="flex items-center justify-between bg-blue-50 border border-blue-200 rounded-xl p-3" data-request-id="{{ request.id }}">
                            <div class="flex items-center flex-1">
                                <img src="{{ asset(request.sender.avatarPath|default('uploads/avatars/user_default.png')) }}"
                                     alt="{{ request.sender.username }}"
                                     class="w-12 h-12 rounded-full border-2 border-blue-200 mr-3">
                                <div class="flex-1 min-w-0">
                                    <h3 class="font-semibold text-gray-900 truncate">{{ request.sender.fullName }}</h3>
                                    <p class="text-sm text-gray-600">@{{ request.sender.username }}</p>
                                    <p class="text-xs text-blue-600 mt-1">{{ request.createdAt|date('d/m/Y à H:i') }}</p>
                                </div>
                            </div>

                            <div class="flex space-x-2 ml-3">
                                <button onclick="handleFriendRequest({{ request.id }}, 'accept')"
                                        class="bg-green-500 text-white px-3 py-1.5 rounded-lg text-sm font-medium hover:bg-green-600 transition-colors">
                                    Accepter
                                </button>
                                <button onclick="handleFriendRequest({{ request.id }}, 'decline')"
                                        class="bg-gray-300 text-gray-700 px-3 py-1.5 rounded-lg text-sm font-medium hover:bg-gray-400 transition-colors">
                                    Refuser
                                </button>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            </div>
        {% endif %}

        {# Suggestions d'amis #}
        <div class="p-4">
            <h2 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                <svg class="w-5 h-5 mr-2 text-[#FF8A00]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"/>
                </svg>
                Suggestions pour vous
            </h2>

            {% if suggestedUsers|length > 0 %}
                <div class="grid grid-cols-1 gap-4">
                    {% for user in suggestedUsers %}
                        <div class="bg-white border border-gray-200 rounded-xl p-4 shadow-sm hover:shadow-md transition-shadow" data-user-id="{{ user.id }}">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center flex-1">
                                    <div class="relative mr-3">
                                        <img src="{{ asset(user.avatarPath|default('uploads/avatars/user_default.png')) }}"
                                             alt="{{ user.username }}"
                                             class="w-14 h-14 rounded-full border-2 border-gray-200">
                                        {% if user.isOnline|default(false) %}
                                            <div class="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 border-2 border-white rounded-full"></div>
                                        {% endif %}
                                    </div>

                                    <div class="flex-1 min-w-0">
                                        <h3 class="font-semibold text-gray-900 truncate">{{ user.fullName }}</h3>
                                        <p class="text-sm text-gray-600">@{{ user.username }}</p>

                                        {# Informações adicionais se disponíveis #}
                                        {% if user.bio %}
                                            <p class="text-xs text-gray-500 mt-1 line-clamp-2">{{ user.bio }}</p>
                                        {% endif %}

                                        {# Amigos em comum se houver #}
                                        {% set mutualFriends = user.mutualFriends|default([]) %}
                                        {% if mutualFriends|length > 0 %}
                                            <p class="text-xs text-blue-600 mt-1">
                                                <svg class="w-3 h-3 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                    <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
                                                </svg>
                                                {{ mutualFriends|length }} ami{{ mutualFriends|length > 1 ? 's' : '' }} en commun
                                            </p>
                                        {% endif %}
                                    </div>
                                </div>

                                <div class="ml-3">
                                    <button onclick="sendFriendRequest({{ user.id }})"
                                            class="friend-btn bg-gradient-to-r from-[#FF8A00] to-[#e67300] text-white px-4 py-2 rounded-lg text-sm font-medium shadow-md hover:shadow-lg transition-all duration-200 hover:scale-105 active:scale-95">
                                        <svg class="w-4 h-4 inline mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                                        </svg>
                                        Ajouter
                                    </button>
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                </div>

                {# Pagination #}
                {% if totalPages > 1 %}
                    <div class="flex justify-center items-center mt-6 space-x-4">
                        {% if hasPrevPage %}
                            <a href="{{ path('app_discover', {'page': currentPage - 1}) }}"
                               class="bg-gray-100 text-gray-700 px-4 py-2 rounded-lg text-sm font-medium hover:bg-gray-200 transition-colors">
                                <svg class="w-4 h-4 inline mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                                </svg>
                                Précédent
                            </a>
                        {% endif %}

                        <span class="bg-[#FF8A00] text-white px-4 py-2 rounded-lg text-sm font-medium">
                            {{ currentPage }} / {{ totalPages }}
                        </span>

                        {% if hasNextPage %}
                            <a href="{{ path('app_discover', {'page': currentPage + 1}) }}"
                               class="bg-gray-100 text-gray-700 px-4 py-2 rounded-lg text-sm font-medium hover:bg-gray-200 transition-colors">
                                Suivant
                                <svg class="w-4 h-4 inline ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                                </svg>
                            </a>
                        {% endif %}
                    </div>
                {% endif %}
            {% else %}
                <div class="text-center py-12">
                    <div class="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <svg class="w-10 h-10 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"/>
                        </svg>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-800 mb-2">Aucune suggestion</h3>
                    <p class="text-gray-500 text-sm">Toutes les suggestions ont été explorées!</p>
                </div>
            {% endif %}
        </div>
    </div>

    {# Toast notification container #}
    <div id="toast-container" class="fixed top-4 left-4 right-4 z-50"></div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Friends suggestions page loaded');
        });

        // Enviar demande d'amitié
        function sendFriendRequest(userId) {
            const button = event.target.closest('button');
            const originalContent = button.innerHTML;

            // Desabilitar botão e mostrar loading
            button.disabled = true;
            button.innerHTML = `
                <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin inline mr-1"></div>
                Envoi...
            `;

            fetch(`/api/discover/friend/add/${userId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'pending') {
                        // Sucesso - mudar o botão
                        button.className = 'friend-btn bg-gray-200 text-gray-600 px-4 py-2 rounded-lg text-sm font-medium cursor-not-allowed';
                        button.innerHTML = `
                        <svg class="w-4 h-4 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                        Envoyé
                    `;
                        button.disabled = true;

                        showToast('Demande d\'amitié envoyée!', 'success');

                        // Vibração de sucesso
                        if (navigator.vibrate) {
                            navigator.vibrate(100);
                        }
                    } else {
                        throw new Error(data.error || data.message || 'Erreur inconnue');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);

                    // Restaurar botão original
                    button.disabled = false;
                    button.innerHTML = originalContent;

                    showToast(error.message || 'Erreur lors de l\'envoi de la demande', 'error');

                    // Vibração de erro
                    if (navigator.vibrate) {
                        navigator.vibrate([100, 50, 100]);
                    }
                });
        }

        // Gérer les demandes d'amitié (accepter/refuser)
        function handleFriendRequest(requestId, action) {
            const requestElement = document.querySelector(`[data-request-id="${requestId}"]`);
            const endpoint = action === 'accept'
                ? `/api/discover/friend/accept/${requestId}`
                : `/api/discover/friend/decline/${requestId}`;

            fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'accepted' || data.status === 'declined') {
                        // Animation de sortie
                        requestElement.style.transition = 'all 0.3s ease-out';
                        requestElement.style.transform = 'translateX(100%)';
                        requestElement.style.opacity = '0';

                        setTimeout(() => {
                            requestElement.remove();

                            // Mettre à jour le compteur dans le header
                            updateRequestCounter();

                            // Masquer section si mais de demandes
                            const remainingRequests = document.querySelectorAll('[data-request-id]').length;
                            if (remainingRequests === 0) {
                                const requestsSection = document.querySelector('.p-4.border-b');
                                if (requestsSection) {
                                    requestsSection.style.transition = 'all 0.3s ease-out';
                                    requestsSection.style.opacity = '0';
                                    setTimeout(() => requestsSection.remove(), 300);
                                }
                            }
                        }, 300);

                        const message = action === 'accept' ? 'Demande acceptée!' : 'Demande refusée';
                        const type = action === 'accept' ? 'success' : 'info';
                        showToast(message, type);

                        // Vibração
                        if (navigator.vibrate) {
                            navigator.vibrate(action === 'accept' ? [100, 50, 100] : 75);
                        }
                    } else {
                        throw new Error(data.error || data.message || 'Erreur inconnue');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast(error.message || 'Erreur lors du traitement de la demande', 'error');

                    if (navigator.vibrate) {
                        navigator.vibrate([100, 50, 100, 50, 100]);
                    }
                });
        }

        // Mettre à jour le compteur de demandes dans le header
        function updateRequestCounter() {
            const remainingRequests = document.querySelectorAll('[data-request-id]').length;
            const counterElements = document.querySelectorAll('.bg-white\\/20 .text-lg');
            if (counterElements.length > 0) {
                counterElements[0].textContent = remainingRequests;
            }
        }

        // Fonction utilitaire pour afficher les toasts
        function showToast(message, type = 'info') {
            const container = document.getElementById('toast-container');
            const toast = document.createElement('div');

            const bgColor = {
                'success': 'bg-green-500',
                'error': 'bg-red-500',
                'info': 'bg-blue-500'
            }[type] || 'bg-gray-800';

            toast.className = `${bgColor} text-white px-4 py-3 rounded-lg shadow-lg text-sm font-medium transform transition-all duration-300 mb-2`;
            toast.textContent = message;
            toast.style.transform = 'translateY(-100px)';

            container.appendChild(toast);

            // Animation d'entrée
            setTimeout(() => {
                toast.style.transform = 'translateY(0)';
            }, 10);

            // Animation de sortie et suppression
            setTimeout(() => {
                toast.style.transform = 'translateY(-100px)';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, 3000);
        }

        // Gestion du pull-to-refresh si supporté
        let startY = 0;
        let pullDistance = 0;
        const refreshThreshold = 80;

        document.addEventListener('touchstart', function(e) {
            startY = e.touches[0].pageY;
        });

        document.addEventListener('touchmove', function(e) {
            if (window.scrollY === 0) {
                pullDistance = e.touches[0].pageY - startY;
                if (pullDistance > 0 && pullDistance < refreshThreshold) {
                    // Aqui você pode adicionar um indicador visual de pull-to-refresh
                }
            }
        });

        document.addEventListener('touchend', function(e) {
            if (pullDistance >= refreshThreshold && window.scrollY === 0) {
                // Refresh da página
                location.reload();
            }
            pullDistance = 0;
        });
    </script>
{% endblock %}
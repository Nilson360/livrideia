{% extends 'base.html.twig' %}

{% block title %}Messagerie{% endblock %}

{% block main_content %}
    <div class="flex flex-col md:flex-row h-[90vh] w-full bg-gray-100 text-sm text-gray-900">

        <!-- Barre latérale (amis) -->
        <aside class="w-full md:w-1/3 bg-green-500 text-white flex flex-col">
            <div class="p-4 border-b border-green-400">
                <input type="text" id="search-input" placeholder="Rechercher un contact..."
                       class="w-full px-3 py-2 rounded bg-green-400 placeholder-white text-white focus:outline-none focus:ring-2 focus:ring-white" />
            </div>

            <ul id="friend-list" class="flex-1 overflow-y-auto divide-y divide-green-400">
                {% for friend in friends %}
                    <li class="friend-item flex items-center p-3 hover:bg-green-400 cursor-pointer transition-all"
                        data-user-id="{{ friend.id }}"
                        data-name="{{ friend.fullName }}">
                        <img src="{{ friend.avatarUrl ?? '/default-avatar.png' }}" class="w-10 h-10 rounded-full mr-3" alt="{{ friend.fullName }}" />
                        <div class="flex-1">
                            <div class="font-semibold">{{ friend.fullName }}</div>
                            <div class="text-sm text-green-100 truncate">{{ friend.lastMessage }}</div>
                        </div>
                        <div class="text-xs text-green-100 ml-2 whitespace-nowrap">{{ friend.lastActive }}</div>
                    </li>
                {% endfor %}
            </ul>

            <div class="p-4 border-t border-green-400">
                <button class="flex items-center justify-center w-full py-2 bg-green-600 hover:bg-green-400 rounded">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" stroke-width="2"
                         viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4"/>
                    </svg>
                    Nouveau message
                </button>
            </div>
        </aside>

        <!-- Zone de chat -->
        <section class="flex-1 bg-white flex flex-col">
            <header id="chat-header" class="flex items-center justify-between p-4 border-b bg-white shadow-sm">
                <h2 class="text-lg font-semibold text-gray-800">Sélectionnez une conversation</h2>
            </header>

            <div id="chat-messages" class="flex-1 p-4 overflow-y-auto space-y-4 bg-gray-50">
                <p class="text-center text-gray-400">Aucun message</p>
            </div>

            <footer class="border-t bg-gray-100 p-4">
                <form id="message-form" class="flex items-center gap-3">
                    <input type="text" id="message-input"
                           placeholder="Tapez un message"
                           class="flex-1 px-4 py-2 border rounded-full bg-white shadow-inner focus:outline-none focus:ring-2 focus:ring-green-500"
                           disabled />
                    <button type="submit" id="send-message"
                            class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-full transition"
                            disabled>
                        Envoyer
                    </button>
                </form>
            </footer>
        </section>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const currentUserId = parseInt(document.body.dataset.userId);
            let selectedFriendId = null;

            const chatHeader = document.getElementById("chat-header").querySelector('h2');
            const messageInput = document.getElementById("message-input");
            const sendButton = document.getElementById("send-message");
            const chatBox = document.getElementById("chat-messages");
            const friendItems = document.querySelectorAll(".friend-item");

            // Recherche d'amis
            document.getElementById("search-input").addEventListener("input", function () {
                const query = this.value.toLowerCase();
                friendItems.forEach(item => {
                    const name = item.dataset.name.toLowerCase();
                    item.style.display = name.includes(query) ? "flex" : "none";
                });
            });

            // Sélection d’un contact
            friendItems.forEach(li => {
                li.addEventListener("click", function () {
                    selectedFriendId = this.dataset.userId;
                    chatHeader.textContent = this.dataset.name;

                    // Highlight
                    friendItems.forEach(el => el.classList.remove("bg-green-400"));
                    this.classList.add("bg-green-400");

                    messageInput.disabled = false;
                    sendButton.disabled = false;

                    loadMessages(selectedFriendId);
                });
            });

            function loadMessages(friendId) {
                fetch(`/chat/messages/${friendId}`)
                    .then(res => res.json())
                    .then(data => {
                        chatBox.innerHTML = "";

                        if (!data.messages || data.messages.length === 0) {
                            chatBox.innerHTML = '<p class="text-center text-gray-400">Aucun message</p>';
                            return;
                        }

                        data.messages.forEach(msg => {
                            const wrapper = document.createElement("div");
                            wrapper.className = "flex " + (msg.sender === currentUserId ? "justify-end" : "justify-start");

                            const bubble = document.createElement("div");
                            bubble.className = `max-w-md p-3 rounded-lg break-words ${
                                msg.sender === currentUserId
                                    ? "bg-green-500 text-white rounded-br-none"
                                    : "bg-gray-200 text-gray-800 rounded-bl-none"
                            }`;
                            bubble.innerHTML = `<p>${msg.content}</p><small class="text-xs block mt-1 text-right opacity-70">${msg.createdAt}</small>`;

                            wrapper.appendChild(bubble);
                            chatBox.appendChild(wrapper);
                        });

                        chatBox.scrollTop = chatBox.scrollHeight;
                    });
            }

            // Envoi du message
            document.getElementById("message-form").addEventListener("submit", function (e) {
                e.preventDefault();
                const content = messageInput.value.trim();
                if (!content || !selectedFriendId) return;

                fetch('/chat/send', {
                    method: "POST",
                    headers: {"Content-Type": "application/x-www-form-urlencoded"},
                    body: new URLSearchParams({content, receiver_id: selectedFriendId})
                }).then(res => res.json()).then(data => {
                    const wrapper = document.createElement("div");
                    wrapper.className = "flex justify-end";

                    const bubble = document.createElement("div");
                    bubble.className = "max-w-md p-3 rounded-lg break-words bg-green-500 text-white rounded-br-none";
                    bubble.innerHTML = `<p>${data.message.content}</p><small class="text-xs block mt-1 text-right opacity-70">${data.message.createdAt}</small>`;

                    wrapper.appendChild(bubble);
                    chatBox.appendChild(wrapper);
                    messageInput.value = "";
                    chatBox.scrollTop = chatBox.scrollHeight;
                });
            });

            // Mercure temps réel
            const eventSource = new EventSource(`http://localhost:8080/.well-known/mercure?topic=chat_user_${currentUserId}`);
            eventSource.onmessage = function (event) {
                const data = JSON.parse(event.data);
                if (selectedFriendId === data.senderId) {
                    const wrapper = document.createElement("div");
                    wrapper.className = "flex justify-start";

                    const bubble = document.createElement("div");
                    bubble.className = "max-w-md p-3 rounded-lg break-words bg-gray-200 text-gray-800 rounded-bl-none";
                    bubble.innerHTML = `<p>${data.content}</p><small class="text-xs block mt-1 text-right opacity-70">${data.timestamp}</small>`;

                    wrapper.appendChild(bubble);
                    chatBox.appendChild(wrapper);
                    chatBox.scrollTop = chatBox.scrollHeight;
                }
            };
        });
    </script>
{% endblock %}

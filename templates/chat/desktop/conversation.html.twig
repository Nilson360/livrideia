{% extends 'home/desktop/base_desktop.html.twig' %}

{% block title %}Conversation avec {{ friend.username }}{% endblock %}

{% block content %}
    <div class="max-w-4xl mx-auto bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden flex flex-col h-[calc(100vh-140px)]">

        {# En-tête de la conversation moderne #}
        <header class="flex items-center justify-between p-6 border-b border-gray-100 bg-gradient-to-r from-gray-50 to-white">
            <div class="flex items-center gap-4">
                <a href="{{ path('app_chat') }}" class="p-2 hover:bg-gray-100 rounded-full transition-colors group">
                    <svg class="w-5 h-5 text-gray-600 group-hover:text-[#FF8A00] transition-colors" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7"/>
                    </svg>
                </a>

                <div class="flex items-center gap-3">
                    <div class="relative">
                        <img src="{{ asset(friend.avatarPath|default('/images/default-profile.png')) }}"
                             alt="{{ friend.username }}"
                             class="w-12 h-12 rounded-full border-2 border-gray-200 shadow-sm">
                        <div class="absolute -bottom-0.5 -right-0.5 w-4 h-4 bg-emerald-500 border-2 border-white rounded-full shadow-sm"></div>
                    </div>
                    <div>
                        <h2 class="text-lg font-semibold text-gray-800">{{ friend.fullName }}</h2>
                        <div class="flex items-center text-sm text-emerald-600">
                            <div class="w-2 h-2 bg-emerald-500 rounded-full mr-2"></div>
                            <span>En ligne</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="flex items-center gap-2">
                <button class="p-2 hover:bg-gray-100 rounded-full transition-colors" title="Appel vocal">
                    <svg class="w-5 h-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                    </svg>
                </button>
                <button class="p-2 hover:bg-gray-100 rounded-full transition-colors" title="Appel vidéo">
                    <svg class="w-5 h-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                    </svg>
                </button>
                <button class="p-2 hover:bg-gray-100 rounded-full transition-colors" title="Plus d'options">
                    <svg class="w-5 h-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"/>
                    </svg>
                </button>
            </div>
        </header>

        {# Zone des messages avec design moderne #}
        <div id="chat-messages" class="flex-1 p-6 overflow-y-auto bg-gradient-to-b from-gray-50/50 to-white space-y-4">
            <div class="flex flex-col items-center justify-center py-12 text-center">
                <div class="relative">
                    <div class="w-16 h-16 bg-gradient-to-br from-[#FF8A00]/20 to-[#FF8A00]/10 rounded-full flex items-center justify-center mb-4">
                        <div class="w-8 h-8 border-2 border-[#FF8A00] border-t-transparent rounded-full animate-spin"></div>
                    </div>
                    <div class="absolute inset-0 bg-gradient-to-br from-[#FF8A00]/10 to-transparent rounded-full animate-pulse"></div>
                </div>
                <h3 class="text-lg font-semibold text-gray-800 mb-2">Chargement de la conversation</h3>
                <p class="text-sm text-gray-500">Récupération des messages avec {{ friend.fullName }}...</p>
            </div>
        </div>

        {# Zone de saisie moderne #}
        <footer class="border-t border-gray-100 bg-white p-4">
            <form id="message-form" class="flex items-end gap-3">
                <div class="flex-1">
                    <div class="relative">
                        <textarea id="message-input"
                                  placeholder="Tapez votre message..."
                                  rows="1"
                                  class="w-full pl-4 pr-12 py-3 border border-gray-200 rounded-xl bg-gray-50 focus:bg-white focus:outline-none focus:ring-2 focus:ring-[#FF8A00] focus:border-transparent text-sm resize-none transition-all duration-200 max-h-32"
                                  style="min-height: 44px;"></textarea>

                        <button type="button" class="absolute right-3 bottom-3 p-1 hover:bg-gray-100 rounded-full transition-colors" title="Joindre un fichier">
                            <svg class="w-4 h-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"/>
                            </svg>
                        </button>
                    </div>

                    <div class="flex items-center justify-between mt-2 px-1">
                        <div class="flex items-center gap-2">
                            <button type="button" class="p-1 hover:bg-gray-100 rounded-full transition-colors" title="Emoji">
                                <svg class="w-4 h-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                </svg>
                            </button>
                            <button type="button" class="p-1 hover:bg-gray-100 rounded-full transition-colors" title="GIF">
                                <svg class="w-4 h-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2m0 0V6a1 1 0 01-1 1H8a1 1 0 01-1-1V4m0 0H4a1 1 0 00-1 1v15a1 1 0 001 1h16a1 1 0 001-1V5a1 1 0 00-1-1h-3"/>
                                </svg>
                            </button>
                        </div>

                        <div class="text-xs text-gray-400">
                            <span id="typing-indicator" class="hidden">{{ friend.fullName }} est en train d'écrire...</span>
                        </div>
                    </div>
                </div>

                <button type="submit" id="send-button"
                        class="bg-gradient-to-r from-[#FF8A00] to-[#e67300] text-white p-3 rounded-xl shadow-md hover:shadow-lg transition-all duration-200 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 min-w-[44px] min-h-[44px] flex items-center justify-center">
                    <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
                    </svg>
                </button>
            </form>
        </footer>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const currentUserId = parseInt(document.body.dataset.userId);
            const friendId = {{ friend.id }};
            const friendName = "{{ friend.fullName }}";
            const chatMessages = document.getElementById('chat-messages');
            const messageForm = document.getElementById('message-form');
            const messageInput = document.getElementById('message-input');
            const sendButton = document.getElementById('send-button');
            const typingIndicator = document.getElementById('typing-indicator');

            let typingTimer;
            let isTyping = false;

            // Auto-resize textarea
            messageInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 128) + 'px';

                // Gestion de l'indicateur de frappe
                if (!isTyping) {
                    isTyping = true;
                    // Envoyer signal de frappe
                }

                clearTimeout(typingTimer);
                typingTimer = setTimeout(() => {
                    isTyping = false;
                    // Arrêter signal de frappe
                }, 1000);
            });

            // Charger les messages
            loadMessages();

            function loadMessages() {
                fetch(`/chat/messages/${friendId}`)
                    .then(response => response.json())
                    .then(data => {
                        chatMessages.innerHTML = '';

                        if (!data.messages || data.messages.length === 0) {
                            chatMessages.innerHTML = `
                                <div class="flex flex-col items-center justify-center py-16 text-center">
                                    <div class="w-20 h-20 bg-gradient-to-br from-gray-100 to-gray-200 rounded-full flex items-center justify-center mb-6">
                                        <svg class="w-10 h-10 text-gray-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.77 9.77 0 01-4.29-1l-4.42 1 .82-4.16A7.964 7.964 0 013 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                                        </svg>
                                    </div>
                                    <h3 class="text-xl font-semibold text-gray-800 mb-2">Début de votre conversation</h3>
                                    <p class="text-gray-500 mb-6 max-w-md">
                                        C'est le début de votre conversation avec ${friendName}.
                                        Partagez vos découvertes littéraires !
                                    </p>
                                    <div class="bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-xl p-4 max-w-md">
                                        <p class="text-sm text-blue-700">
                                            💡 <strong>Suggestion :</strong> Commencez par partager votre livre du moment ou demandez des recommandations !
                                        </p>
                                    </div>
                                </div>
                            `;
                            return;
                        }

                        // Grouper par date
                        let lastDate = null;

                        data.messages.forEach(msg => {
                            const messageDate = new Date(msg.createdAt).toDateString();

                            // Ajouter séparateur de date si nécessaire
                            if (lastDate !== messageDate) {
                                const dateSeparator = document.createElement('div');
                                dateSeparator.className = 'flex items-center justify-center my-6';
                                dateSeparator.innerHTML = `
                                    <div class="bg-gray-100 text-gray-500 text-xs px-3 py-1 rounded-full">
                                        ${formatDate(msg.createdAt)}
                                    </div>
                                `;
                                chatMessages.appendChild(dateSeparator);
                                lastDate = messageDate;
                            }

                            const isCurrentUser = msg.sender === currentUserId;

                            const wrapper = document.createElement('div');
                            wrapper.className = `flex ${isCurrentUser ? 'justify-end' : 'justify-start'} group`;

                            const bubble = document.createElement('div');
                            bubble.className = `max-w-md p-4 rounded-2xl text-sm shadow-sm transition-all duration-200 hover:shadow-md ${
                                isCurrentUser
                                    ? 'bg-gradient-to-r from-[#FF8A00] to-[#e67300] text-white rounded-br-md'
                                    : 'bg-white text-gray-800 border border-gray-200 rounded-bl-md'
                            }`;

                            bubble.innerHTML = `
                                <p class="leading-relaxed whitespace-pre-wrap">${msg.content}</p>
                                <div class="text-xs mt-2 ${isCurrentUser ? 'text-orange-100' : 'text-gray-500'} flex items-center justify-end gap-1">
                                    <span>${formatTime(msg.createdAt)}</span>
                                    ${isCurrentUser ? `
                                        <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                        </svg>
                                    ` : ''}
                                </div>
                            `;

                            // Animation d'apparition
                            bubble.style.opacity = '0';
                            bubble.style.transform = 'translateY(10px)';

                            wrapper.appendChild(bubble);
                            chatMessages.appendChild(wrapper);

                            // Trigger animation
                            setTimeout(() => {
                                bubble.style.transition = 'all 0.3s ease';
                                bubble.style.opacity = '1';
                                bubble.style.transform = 'translateY(0)';
                            }, 50);
                        });

                        // Scroll to bottom
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                    })
                    .catch(error => {
                        console.error('Error loading messages:', error);
                        chatMessages.innerHTML = `
                            <div class="flex flex-col items-center justify-center py-16 text-center">
                                <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4">
                                    <svg class="w-8 h-8 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                </div>
                                <h3 class="text-lg font-semibold text-gray-800 mb-2">Erreur de chargement</h3>
                                <p class="text-red-500 mb-4">Impossible de charger les messages.</p>
                                <button onclick="loadMessages()" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors">
                                    Réessayer
                                </button>
                            </div>
                        `;
                    });
            }

            // Envoyer un message
            messageForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const content = messageInput.value.trim();

                if (!content) return;

                // Désactiver l'interface temporairement
                sendButton.disabled = true;
                messageInput.disabled = true;

                fetch('/chat/send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: new URLSearchParams({
                        content: content,
                        receiver_id: friendId
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        // Ajouter le message envoyé à la conversation
                        const wrapper = document.createElement('div');
                        wrapper.className = 'flex justify-end group';

                        const bubble = document.createElement('div');
                        bubble.className = 'max-w-md p-4 rounded-2xl text-sm shadow-sm bg-gradient-to-r from-[#FF8A00] to-[#e67300] text-white rounded-br-md';

                        bubble.innerHTML = `
                            <p class="leading-relaxed whitespace-pre-wrap">${data.message.content}</p>
                            <div class="text-xs mt-2 text-orange-100 flex items-center justify-end gap-1">
                                <span>${formatTime(data.message.createdAt)}</span>
                                <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                </svg>
                            </div>
                        `;

                        wrapper.appendChild(bubble);
                        chatMessages.appendChild(wrapper);

                        // Animation d'envoi
                        bubble.style.opacity = '0';
                        bubble.style.transform = 'translateX(20px)';
                        setTimeout(() => {
                            bubble.style.transition = 'all 0.3s ease';
                            bubble.style.opacity = '1';
                            bubble.style.transform = 'translateX(0)';
                        }, 50);

                        // Vider l'input et scroll down
                        messageInput.value = '';
                        messageInput.style.height = 'auto';
                        chatMessages.scrollTop = chatMessages.scrollHeight;

                        // Réactiver l'interface
                        sendButton.disabled = false;
                        messageInput.disabled = false;
                        messageInput.focus();
                    })
                    .catch(error => {
                        console.error('Error sending message:', error);

                        // Réactiver l'interface
                        sendButton.disabled = false;
                        messageInput.disabled = false;

                        // Afficher erreur
                        const errorDiv = document.createElement('div');
                        errorDiv.className = 'bg-red-100 border border-red-300 text-red-700 px-4 py-2 rounded-lg text-sm mb-4';
                        errorDiv.textContent = 'Erreur lors de l\'envoi du message. Veuillez réessayer.';
                        chatMessages.appendChild(errorDiv);

                        setTimeout(() => errorDiv.remove(), 5000);
                    });
            });

            // Raccourcis clavier
            messageInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    messageForm.dispatchEvent(new Event('submit'));
                }
            });

            // Réception des messages en temps réel
            const eventSource = new EventSource(`/mercure/.well-known/mercure?topic=chat_user_${currentUserId}`);
            eventSource.onmessage = function(event) {
                const data = JSON.parse(event.data);

                if (parseInt(data.senderId) === friendId) {
                    const wrapper = document.createElement('div');
                    wrapper.className = 'flex justify-start group';

                    const bubble = document.createElement('div');
                    bubble.className = 'max-w-md p-4 rounded-2xl text-sm shadow-sm bg-white text-gray-800 border border-gray-200 rounded-bl-md';

                    bubble.innerHTML = `
                        <p class="leading-relaxed whitespace-pre-wrap">${data.content}</p>
                        <div class="text-xs mt-2 text-gray-500 flex items-center justify-end">
                            <span>${formatTime(data.timestamp)}</span>
                        </div>
                    `;

                    wrapper.appendChild(bubble);
                    chatMessages.appendChild(wrapper);

                    // Animation de réception
                    bubble.style.opacity = '0';
                    bubble.style.transform = 'translateX(-20px)';
                    setTimeout(() => {
                        bubble.style.transition = 'all 0.3s ease';
                        bubble.style.opacity = '1';
                        bubble.style.transform = 'translateX(0)';
                    }, 50);

                    // Scroll to bottom
                    chatMessages.scrollTop = chatMessages.scrollHeight;

                    // Feedback sonore/visuel
                    if (navigator.vibrate) {
                        navigator.vibrate(50);
                    }
                }
            };

            // Fonctions utilitaires
            function formatDate(dateString) {
                const date = new Date(dateString);
                const today = new Date();
                const yesterday = new Date(today);
                yesterday.setDate(yesterday.getDate() - 1);

                if (date.toDateString() === today.toDateString()) {
                    return "Aujourd'hui";
                } else if (date.toDateString() === yesterday.toDateString()) {
                    return "Hier";
                } else {
                    return date.toLocaleDateString('fr-FR', {
                        weekday: 'long',
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });
                }
            }

            function formatTime(dateString) {
                return new Date(dateString).toLocaleTimeString('fr-FR', {
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }

            // Focus sur l'input au chargement
            messageInput.focus();

            // Feedback tactile
            if (navigator.vibrate) {
                sendButton.addEventListener('click', () => {
                    navigator.vibrate(30);
                });
            }
        });
    </script>
{% endblock %}
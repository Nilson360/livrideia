{% extends 'home/mobile/base.mobile.html.twig' %}

{% block title %}Conversation avec {{ friend.username }}{% endblock %}

{% block content %}
    <div class="flex flex-col h-full">
        {# En-tête de la conversation #}
        <div class="flex items-center p-3 border-b">
            <a href="{{ path('app_chat') }}" class="mr-2">
                <svg class="w-6 h-6 text-[#FF8A00]" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7"/>
                </svg>
            </a>
            <img src="{{ asset(friend.avatarPath|default('/images/default-profile.png')) }}"
                 alt="{{ friend.username }}"
                 class="w-10 h-10 rounded-full border mr-3">
            <div>
                <h2 class="font-medium">{{ friend.fullName }}</h2>
                <div class="text-xs text-gray-500">@{{ friend.username }}</div>
            </div>
        </div>

        {# Zone des messages #}
        <div id="chat-messages" class="flex-1 p-4 overflow-y-auto space-y-4 bg-gray-50">
            <div class="text-center py-10">
                <div class="w-8 h-8 mx-auto border-2 border-t-[#FF8A00] border-gray-200 rounded-full animate-spin"></div>
                <p class="text-sm text-gray-500 mt-2">Chargement des messages...</p>
            </div>
        </div>

        {# Zone de saisie du message #}
        <div class="p-3 border-t bg-white">
            <form id="message-form" class="flex items-center gap-2">
                <input type="text" id="message-input"
                       placeholder="Votre message..."
                       class="flex-1 border border-gray-300 rounded-full py-2 px-4 focus:outline-none focus:ring-2 focus:ring-[#FF8A00]">
                <button type="submit" id="send-button" class="bg-[#FF8A00] text-white rounded-full p-2">
                    <svg class="w-6 h-6" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
                    </svg>
                </button>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const currentUserId = parseInt(document.body.dataset.userId);
            const friendId = {{ friend.id }};
            const chatMessages = document.getElementById('chat-messages');
            const messageForm = document.getElementById('message-form');
            const messageInput = document.getElementById('message-input');

            // Charger les messages
            loadMessages();

            function loadMessages() {
                fetch(`/chat/messages/${friendId}`)
                    .then(response => response.json())
                    .then(data => {
                        chatMessages.innerHTML = '';

                        if (!data.messages || data.messages.length === 0) {
                            chatMessages.innerHTML = `
                                <div class="flex flex-col items-center justify-center py-10 text-center">
                                    <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-3">
                                        <svg class="w-8 h-8 text-gray-400" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 14H6l-2 2V4h16v12z"/>
                                        </svg>
                                    </div>
                                    <p class="text-gray-500">Aucun message. Commencez la conversation !</p>
                                </div>
                            `;
                            return;
                        }

                        // Grouper les messages par date (aujourd'hui, hier, etc.)
                        data.messages.forEach(msg => {
                            const isCurrentUser = msg.sender === currentUserId;

                            const wrapper = document.createElement('div');
                            wrapper.className = `flex ${isCurrentUser ? 'justify-end' : 'justify-start'}`;

                            const bubble = document.createElement('div');
                            bubble.className = `max-w-[75%] p-3 rounded-lg text-sm ${
                                isCurrentUser
                                    ? 'bg-[#FF8A00] text-white rounded-br-none'
                                    : 'bg-white border border-gray-200 rounded-bl-none'
                            }`;

                            bubble.innerHTML = `
                                <p>${msg.content}</p>
                                <div class="text-xs text-right mt-1 ${isCurrentUser ? 'text-white/70' : 'text-gray-500'}">
                                    ${msg.createdAt}
                                </div>
                            `;

                            wrapper.appendChild(bubble);
                            chatMessages.appendChild(wrapper);
                        });

                        // Scroll to bottom
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                    })
                    .catch(error => {
                        console.error('Error loading messages:', error);
                        chatMessages.innerHTML = `
                            <div class="text-center py-8">
                                <p class="text-red-500">Erreur lors du chargement des messages.</p>
                            </div>
                        `;
                    });
            }

            // Envoyer un message
            messageForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const content = messageInput.value.trim();

                if (!content) return;

                fetch('/chat/send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: new URLSearchParams({
                        content: content,
                        receiver_id: friendId
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        // Ajouter le message envoyé à la conversation
                        const wrapper = document.createElement('div');
                        wrapper.className = 'flex justify-end';

                        const bubble = document.createElement('div');
                        bubble.className = 'max-w-[75%] p-3 rounded-lg text-sm bg-[#FF8A00] text-white rounded-br-none';

                        bubble.innerHTML = `
                        <p>${data.message.content}</p>
                        <div class="text-xs text-right mt-1 text-white/70">
                            ${data.message.createdAt}
                        </div>
                    `;

                        wrapper.appendChild(bubble);
                        chatMessages.appendChild(wrapper);

                        // Vider l'input et scroll down
                        messageInput.value = '';
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                    })
                    .catch(error => {
                        console.error('Error sending message:', error);
                        alert('Erreur lors de l\'envoi du message');
                    });
            });

            // Réception des messages en temps réel
            const eventSource = new EventSource(`/mercure/.well-known/mercure?topic=chat_user_${currentUserId}`);
            eventSource.onmessage = function(event) {
                const data = JSON.parse(event.data);

                if (parseInt(data.senderId) === friendId) {
                    const wrapper = document.createElement('div');
                    wrapper.className = 'flex justify-start';

                    const bubble = document.createElement('div');
                    bubble.className = 'max-w-[75%] p-3 rounded-lg text-sm bg-white border border-gray-200 rounded-bl-none';

                    bubble.innerHTML = `
                        <p>${data.content}</p>
                        <div class="text-xs text-right mt-1 text-gray-500">
                            ${data.timestamp}
                        </div>
                    `;

                    wrapper.appendChild(bubble);
                    chatMessages.appendChild(wrapper);

                    // Scroll to bottom
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }
            };

            // Focus sur l'input
            messageInput.focus();
        });
    </script>
{% endblock %}